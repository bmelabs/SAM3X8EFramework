
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a4  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000042c  20070000  000803a4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  2007042c  000807d0  0002042c  2**2
                  ALLOC
  3 .stack        00002004  2007046c  00080810  0002042c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020455  2**0
                  CONTENTS, READONLY
  6 .debug_info   00002be7  00000000  00000000  000204ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ff  00000000  00000000  00023095  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000080  00000000  00000000  00023794  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000040  00000000  00000000  00023814  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00012e73  00000000  00000000  00023854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002df9  00000000  00000000  000366c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0005cea8  00000000  00000000  000394c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000250  00000000  00000000  00096368  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000008b  00000000  00000000  000965b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	70 24 07 20 65 01 08 00 63 01 08 00 63 01 08 00     p$. e...c...c...
   80010:	63 01 08 00 63 01 08 00 63 01 08 00 00 00 00 00     c...c...c.......
	...
   8002c:	63 01 08 00 63 01 08 00 00 00 00 00 63 01 08 00     c...c.......c...
   8003c:	63 01 08 00 63 01 08 00 63 01 08 00 63 01 08 00     c...c...c...c...
   8004c:	63 01 08 00 63 01 08 00 63 01 08 00 63 01 08 00     c...c...c...c...
   8005c:	63 01 08 00 63 01 08 00 63 01 08 00 00 00 00 00     c...c...c.......
   8006c:	63 01 08 00 63 01 08 00 63 01 08 00 63 01 08 00     c...c...c...c...
	...
   80084:	63 01 08 00 63 01 08 00 63 01 08 00 63 01 08 00     c...c...c...c...
   80094:	63 01 08 00 63 01 08 00 63 01 08 00 63 01 08 00     c...c...c...c...
   800a4:	00 00 00 00 63 01 08 00 63 01 08 00 63 01 08 00     ....c...c...c...
   800b4:	63 01 08 00 63 01 08 00 63 01 08 00 63 01 08 00     c...c...c...c...
   800c4:	63 01 08 00 63 01 08 00 63 01 08 00 63 01 08 00     c...c...c...c...
   800d4:	63 01 08 00 63 01 08 00 63 01 08 00 63 01 08 00     c...c...c...c...
   800e4:	63 01 08 00 63 01 08 00 63 01 08 00 63 01 08 00     c...c...c...c...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007042c 	.word	0x2007042c
   80110:	00000000 	.word	0x00000000
   80114:	000803a4 	.word	0x000803a4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000803a4 	.word	0x000803a4
   80154:	20070430 	.word	0x20070430
   80158:	000803a4 	.word	0x000803a4
   8015c:	00000000 	.word	0x00000000

00080160 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
   80160:	4770      	bx	lr

00080162 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80162:	e7fe      	b.n	80162 <Dummy_Handler>

00080164 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80164:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80166:	4b1c      	ldr	r3, [pc, #112]	; (801d8 <Reset_Handler+0x74>)
   80168:	4a1c      	ldr	r2, [pc, #112]	; (801dc <Reset_Handler+0x78>)
   8016a:	429a      	cmp	r2, r3
   8016c:	d010      	beq.n	80190 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   8016e:	4b1c      	ldr	r3, [pc, #112]	; (801e0 <Reset_Handler+0x7c>)
   80170:	4a19      	ldr	r2, [pc, #100]	; (801d8 <Reset_Handler+0x74>)
   80172:	429a      	cmp	r2, r3
   80174:	d20c      	bcs.n	80190 <Reset_Handler+0x2c>
   80176:	3b01      	subs	r3, #1
   80178:	1a9b      	subs	r3, r3, r2
   8017a:	f023 0303 	bic.w	r3, r3, #3
   8017e:	3304      	adds	r3, #4
   80180:	4413      	add	r3, r2
   80182:	4916      	ldr	r1, [pc, #88]	; (801dc <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80184:	f851 0b04 	ldr.w	r0, [r1], #4
   80188:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   8018c:	429a      	cmp	r2, r3
   8018e:	d1f9      	bne.n	80184 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80190:	4b14      	ldr	r3, [pc, #80]	; (801e4 <Reset_Handler+0x80>)
   80192:	4a15      	ldr	r2, [pc, #84]	; (801e8 <Reset_Handler+0x84>)
   80194:	429a      	cmp	r2, r3
   80196:	d20a      	bcs.n	801ae <Reset_Handler+0x4a>
   80198:	3b01      	subs	r3, #1
   8019a:	1a9b      	subs	r3, r3, r2
   8019c:	f023 0303 	bic.w	r3, r3, #3
   801a0:	3304      	adds	r3, #4
   801a2:	4413      	add	r3, r2
		*pDest++ = 0;
   801a4:	2100      	movs	r1, #0
   801a6:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   801aa:	4293      	cmp	r3, r2
   801ac:	d1fb      	bne.n	801a6 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   801ae:	4b0f      	ldr	r3, [pc, #60]	; (801ec <Reset_Handler+0x88>)
   801b0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   801b4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   801b8:	490d      	ldr	r1, [pc, #52]	; (801f0 <Reset_Handler+0x8c>)
   801ba:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   801bc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   801c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   801c4:	d203      	bcs.n	801ce <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   801c6:	688b      	ldr	r3, [r1, #8]
   801c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   801cc:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   801ce:	4b09      	ldr	r3, [pc, #36]	; (801f4 <Reset_Handler+0x90>)
   801d0:	4798      	blx	r3

	/* Branch to main function */
	main();
   801d2:	4b09      	ldr	r3, [pc, #36]	; (801f8 <Reset_Handler+0x94>)
   801d4:	4798      	blx	r3
   801d6:	e7fe      	b.n	801d6 <Reset_Handler+0x72>
   801d8:	20070000 	.word	0x20070000
   801dc:	000803a4 	.word	0x000803a4
   801e0:	2007042c 	.word	0x2007042c
   801e4:	2007046c 	.word	0x2007046c
   801e8:	2007042c 	.word	0x2007042c
   801ec:	00080000 	.word	0x00080000
   801f0:	e000ed00 	.word	0xe000ed00
   801f4:	0008020d 	.word	0x0008020d
   801f8:	000801fd 	.word	0x000801fd

000801fc <main>:
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
#include <asf.h>

int main (void)
{
   801fc:	b508      	push	{r3, lr}
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
   801fe:	4b02      	ldr	r3, [pc, #8]	; (80208 <main+0xc>)
   80200:	4798      	blx	r3

	/* Insert application code here, after the board has been initialized. */
}
   80202:	2000      	movs	r0, #0
   80204:	bd08      	pop	{r3, pc}
   80206:	bf00      	nop
   80208:	00080161 	.word	0x00080161

0008020c <__libc_init_array>:
   8020c:	b570      	push	{r4, r5, r6, lr}
   8020e:	4e0f      	ldr	r6, [pc, #60]	; (8024c <__libc_init_array+0x40>)
   80210:	4d0f      	ldr	r5, [pc, #60]	; (80250 <__libc_init_array+0x44>)
   80212:	1b76      	subs	r6, r6, r5
   80214:	10b6      	asrs	r6, r6, #2
   80216:	bf18      	it	ne
   80218:	2400      	movne	r4, #0
   8021a:	d005      	beq.n	80228 <__libc_init_array+0x1c>
   8021c:	3401      	adds	r4, #1
   8021e:	f855 3b04 	ldr.w	r3, [r5], #4
   80222:	4798      	blx	r3
   80224:	42a6      	cmp	r6, r4
   80226:	d1f9      	bne.n	8021c <__libc_init_array+0x10>
   80228:	4e0a      	ldr	r6, [pc, #40]	; (80254 <__libc_init_array+0x48>)
   8022a:	4d0b      	ldr	r5, [pc, #44]	; (80258 <__libc_init_array+0x4c>)
   8022c:	f000 f8a8 	bl	80380 <_init>
   80230:	1b76      	subs	r6, r6, r5
   80232:	10b6      	asrs	r6, r6, #2
   80234:	bf18      	it	ne
   80236:	2400      	movne	r4, #0
   80238:	d006      	beq.n	80248 <__libc_init_array+0x3c>
   8023a:	3401      	adds	r4, #1
   8023c:	f855 3b04 	ldr.w	r3, [r5], #4
   80240:	4798      	blx	r3
   80242:	42a6      	cmp	r6, r4
   80244:	d1f9      	bne.n	8023a <__libc_init_array+0x2e>
   80246:	bd70      	pop	{r4, r5, r6, pc}
   80248:	bd70      	pop	{r4, r5, r6, pc}
   8024a:	bf00      	nop
   8024c:	0008038c 	.word	0x0008038c
   80250:	0008038c 	.word	0x0008038c
   80254:	00080394 	.word	0x00080394
   80258:	0008038c 	.word	0x0008038c

0008025c <register_fini>:
   8025c:	4b02      	ldr	r3, [pc, #8]	; (80268 <register_fini+0xc>)
   8025e:	b113      	cbz	r3, 80266 <register_fini+0xa>
   80260:	4802      	ldr	r0, [pc, #8]	; (8026c <register_fini+0x10>)
   80262:	f000 b805 	b.w	80270 <atexit>
   80266:	4770      	bx	lr
   80268:	00000000 	.word	0x00000000
   8026c:	0008027d 	.word	0x0008027d

00080270 <atexit>:
   80270:	2300      	movs	r3, #0
   80272:	4601      	mov	r1, r0
   80274:	461a      	mov	r2, r3
   80276:	4618      	mov	r0, r3
   80278:	f000 b81e 	b.w	802b8 <__register_exitproc>

0008027c <__libc_fini_array>:
   8027c:	b538      	push	{r3, r4, r5, lr}
   8027e:	4c0a      	ldr	r4, [pc, #40]	; (802a8 <__libc_fini_array+0x2c>)
   80280:	4d0a      	ldr	r5, [pc, #40]	; (802ac <__libc_fini_array+0x30>)
   80282:	1b64      	subs	r4, r4, r5
   80284:	10a4      	asrs	r4, r4, #2
   80286:	d00a      	beq.n	8029e <__libc_fini_array+0x22>
   80288:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8028c:	3b01      	subs	r3, #1
   8028e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80292:	3c01      	subs	r4, #1
   80294:	f855 3904 	ldr.w	r3, [r5], #-4
   80298:	4798      	blx	r3
   8029a:	2c00      	cmp	r4, #0
   8029c:	d1f9      	bne.n	80292 <__libc_fini_array+0x16>
   8029e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   802a2:	f000 b877 	b.w	80394 <_fini>
   802a6:	bf00      	nop
   802a8:	000803a4 	.word	0x000803a4
   802ac:	000803a0 	.word	0x000803a0

000802b0 <__retarget_lock_acquire_recursive>:
   802b0:	4770      	bx	lr
   802b2:	bf00      	nop

000802b4 <__retarget_lock_release_recursive>:
   802b4:	4770      	bx	lr
   802b6:	bf00      	nop

000802b8 <__register_exitproc>:
   802b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   802bc:	4d2c      	ldr	r5, [pc, #176]	; (80370 <__register_exitproc+0xb8>)
   802be:	4606      	mov	r6, r0
   802c0:	6828      	ldr	r0, [r5, #0]
   802c2:	4698      	mov	r8, r3
   802c4:	460f      	mov	r7, r1
   802c6:	4691      	mov	r9, r2
   802c8:	f7ff fff2 	bl	802b0 <__retarget_lock_acquire_recursive>
   802cc:	4b29      	ldr	r3, [pc, #164]	; (80374 <__register_exitproc+0xbc>)
   802ce:	681c      	ldr	r4, [r3, #0]
   802d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   802d4:	2b00      	cmp	r3, #0
   802d6:	d03e      	beq.n	80356 <__register_exitproc+0x9e>
   802d8:	685a      	ldr	r2, [r3, #4]
   802da:	2a1f      	cmp	r2, #31
   802dc:	dc1c      	bgt.n	80318 <__register_exitproc+0x60>
   802de:	f102 0e01 	add.w	lr, r2, #1
   802e2:	b176      	cbz	r6, 80302 <__register_exitproc+0x4a>
   802e4:	2101      	movs	r1, #1
   802e6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   802ea:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   802ee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   802f2:	4091      	lsls	r1, r2
   802f4:	4308      	orrs	r0, r1
   802f6:	2e02      	cmp	r6, #2
   802f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   802fc:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80300:	d023      	beq.n	8034a <__register_exitproc+0x92>
   80302:	3202      	adds	r2, #2
   80304:	f8c3 e004 	str.w	lr, [r3, #4]
   80308:	6828      	ldr	r0, [r5, #0]
   8030a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8030e:	f7ff ffd1 	bl	802b4 <__retarget_lock_release_recursive>
   80312:	2000      	movs	r0, #0
   80314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80318:	4b17      	ldr	r3, [pc, #92]	; (80378 <__register_exitproc+0xc0>)
   8031a:	b30b      	cbz	r3, 80360 <__register_exitproc+0xa8>
   8031c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80320:	f3af 8000 	nop.w
   80324:	4603      	mov	r3, r0
   80326:	b1d8      	cbz	r0, 80360 <__register_exitproc+0xa8>
   80328:	2000      	movs	r0, #0
   8032a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8032e:	f04f 0e01 	mov.w	lr, #1
   80332:	6058      	str	r0, [r3, #4]
   80334:	6019      	str	r1, [r3, #0]
   80336:	4602      	mov	r2, r0
   80338:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8033c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80340:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80344:	2e00      	cmp	r6, #0
   80346:	d0dc      	beq.n	80302 <__register_exitproc+0x4a>
   80348:	e7cc      	b.n	802e4 <__register_exitproc+0x2c>
   8034a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8034e:	4301      	orrs	r1, r0
   80350:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80354:	e7d5      	b.n	80302 <__register_exitproc+0x4a>
   80356:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8035a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8035e:	e7bb      	b.n	802d8 <__register_exitproc+0x20>
   80360:	6828      	ldr	r0, [r5, #0]
   80362:	f7ff ffa7 	bl	802b4 <__retarget_lock_release_recursive>
   80366:	f04f 30ff 	mov.w	r0, #4294967295
   8036a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8036e:	bf00      	nop
   80370:	20070428 	.word	0x20070428
   80374:	0008037c 	.word	0x0008037c
   80378:	00000000 	.word	0x00000000

0008037c <_global_impure_ptr>:
   8037c:	20070000                                ... 

00080380 <_init>:
   80380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80382:	bf00      	nop
   80384:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80386:	bc08      	pop	{r3}
   80388:	469e      	mov	lr, r3
   8038a:	4770      	bx	lr

0008038c <__init_array_start>:
   8038c:	0008025d 	.word	0x0008025d

00080390 <__frame_dummy_init_array_entry>:
   80390:	00080119                                ....

00080394 <_fini>:
   80394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80396:	bf00      	nop
   80398:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8039a:	bc08      	pop	{r3}
   8039c:	469e      	mov	lr, r3
   8039e:	4770      	bx	lr

000803a0 <__fini_array_start>:
   803a0:	000800f5 	.word	0x000800f5
